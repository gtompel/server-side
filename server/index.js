import express from "express"
import cors from "cors"
import { rateLimit } from "express-rate-limit"
import { fileURLToPath } from "url"
import { dirname, join } from "path"

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

// –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
const DATA_SIZE = 1000000
const data = Array.from({ length: DATA_SIZE }, (_, index) => ({
  id: index + 1,
  value: `–≠–ª–µ–º–µ–Ω—Ç ${index + 1}`,
}))

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let userSelections = new Set()
let sortOrder = []

const app = express()
const PORT = process.env.PORT || 3001

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 1000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–ΩÔøΩÔøΩ
  standardHeaders: true,
  legacyHeaders: false,
})

app.use(cors())
app.use(express.json())
app.use("/api", limiter)

// Health check endpoint –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
app.get("/health", (req, res) => {
  res.json({
    status: "OK",
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    memory: process.memoryUsage(),
  })
})

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.get("/api/data", (req, res) => {
  const page = Number.parseInt(req.query.page) || 0
  const limit = Number.parseInt(req.query.limit) || 20
  const search = req.query.search || ""

  let filteredData = [...data]

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
  if (search) {
    filteredData = filteredData.filter((item) => item.value.toLowerCase().includes(search.toLowerCase()))
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
  if (sortOrder.length > 0) {
    const orderMap = new Map()
    sortOrder.forEach((id, index) => {
      orderMap.set(id, index)
    })

    filteredData.sort((a, b) => {
      const aIndex = orderMap.has(a.id) ? orderMap.get(a.id) : Number.POSITIVE_INFINITY
      const bIndex = orderMap.has(b.id) ? orderMap.get(b.id) : Number.POSITIVE_INFINITY

      if (aIndex === Number.POSITIVE_INFINITY && bIndex === Number.POSITIVE_INFINITY) {
        return a.id - b.id
      }

      return aIndex - bIndex
    })
  }

  // –í—ã—á–∏—Å–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
  const start = page * limit
  const end = start + limit
  const paginatedData = filteredData.slice(start, end)

  res.json({
    items: paginatedData,
    total: filteredData.length,
    page,
    hasMore: end < filteredData.length,
  })
})

app.post("/api/selections", (req, res) => {
  const { selections } = req.body
  userSelections = new Set(selections)
  res.json({ success: true })
})

app.get("/api/selections", (req, res) => {
  res.json({
    selections: Array.from(userSelections),
  })
})

app.post("/api/sort-order", (req, res) => {
  const { order } = req.body
  sortOrder = order
  res.json({ success: true })
})

app.get("/api/sort-order", (req, res) => {
  res.json({
    order: sortOrder,
  })
})

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ dist (Vite build output)
const distPath = join(__dirname, "../dist")
app.use(express.static(distPath))

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è SPA
app.get("*", (req, res) => {
  res.sendFile(join(distPath, "index.html"))
})

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ 0.0.0.0 –¥–ª—è –¥–µ–ø–ª–æ—è
app.listen(PORT, "0.0.0.0", () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ 0.0.0.0:${PORT}`)
  console.log(`üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://0.0.0.0:${PORT}`)
  console.log(`üè• Health check: http://0.0.0.0:${PORT}/health`)
})
